variables:
   DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG


stages:          # List of stages for jobs, and their order of execution
#  - build
#  - test
  - deploy

#docker-build:
#  image: docker:cli
#  stage: build
#  tags:
#    - docker
#  services:
#    - docker:dind
#  before_script:
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  after_script:
#    - docker image prune -a
#  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
#  # Default branch is also tagged with `latest`
#  script:
#    - docker build --pull -t "$DOCKER_IMAGE_NAME" -f ./ui/web/Dockerfile .
#    - docker push "$DOCKER_IMAGE_NAME"
#    - |
#      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
#        docker push "$CI_REGISTRY_IMAGE:latest"
#      fi
#  # Run this job in a branch where a Dockerfile exists
#  rules:
#    - if: $CI_COMMIT_BRANCH
#      exists:
#        - ui/web/Dockerfile
#
#test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  tags:
#    - docker
#  needs:
#    - docker-build
#  script:
#    - echo "Linting code... This will take about 10 seconds."
##    - sleep 10
#    - echo "No lint issues found."

docker-deploy:
  tags:
    - docker
  stage: deploy
  only:
    - main
  environment: production
  script:
    - cd ./ui/web/
    - echo "Appending production environment variables..."
    - cat ${PROD_ENV} >> .env
    - echo "Stopping existing containers (if any)..."
    - echo $USER
    - ls
#    - docker-compose --file docker-compose.prod.yaml down || true
#    - echo "Pushing Docker image to registry..."
#    - docker push "$DOCKER_IMAGE_NAME"
#    - echo "Starting containers in production mode..."
#    - docker-compose --file docker-compose.prod.yaml up -d
#    - echo "Deployment completed."
